{"version":3,"sources":["components/Header/Header.jsx","components/Body/PostContainer/Post/Post.jsx","components/Body/PostContainer/PostContainer.jsx","components/Body/FavoriteContainer/FavoriteContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","_this$props","this","props","subreddit","favoritesCount","react_default","a","createElement","className","aria-hidden","focusable","data-prefix","data-icon","role","xmlns","viewBox","fill","d","react_router_dom","style","textDecoration","color","to","activeStyle","react_fontawesome_index_es","icon","margin","Component","Post","state","addClass","likeIcon","setState","isFavaorite","_this2","postImg","postTitle","postUser","postTime","postView","post","addFavorite","deleteFavorite","postID","boxClass","push","src","alt","onClick","onFav","join","fontSize","marginRight","PostContainer","_this","posts","favorites","map","x","index","data","url","title","author","moment","from","utc","created","ups","id","isFavorite","PostContainer_Post_Post","key","Favorite","lengths","Object","keys","library","add","faUser","faClock","faBolt","faHeart","faTrash","App","isLoading","favorite","objectSpread","length","localStorageRef","localStorage","getItem","URL","concat","axios","get","then","res","children","JSON","parse","setItem","stringify","_this3","components_Header_Header","react_router","exact","path","render","Body_PostContainer_PostContainer","assign","FavoriteContainer_FavoriteContainer","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6528ebc9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport './Header.scss';\nclass Header extends Component {\n  render() {\n    const { subreddit, favoritesCount } = this.props;\n    return (\n      <header className=\"header-container\">\n        <div className=\"url-container\">\n          <div className=\"reddit-logo\">\n            <svg\n              aria-hidden=\"true\"\n              focusable=\"false\"\n              data-prefix=\"fab\"\n              data-icon=\"reddit-alien\"\n              className=\"svg-inline--fa fa-reddit-alien fa-w-16\"\n              role=\"img\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 512 512\"\n            >\n              <path\n                fill=\"#ffffff\"\n                d=\"M440.3 203.5c-15 0-28.2 6.2-37.9 15.9-35.7-24.7-83.8-40.6-137.1-42.3L293 52.3l88.2 19.8c0 21.6 17.6 39.2 39.2 39.2 22 0 39.7-18.1 39.7-39.7s-17.6-39.7-39.7-39.7c-15.4 0-28.7 9.3-35.3 22l-97.4-21.6c-4.9-1.3-9.7 2.2-11 7.1L246.3 177c-52.9 2.2-100.5 18.1-136.3 42.8-9.7-10.1-23.4-16.3-38.4-16.3-55.6 0-73.8 74.6-22.9 100.1-1.8 7.9-2.6 16.3-2.6 24.7 0 83.8 94.4 151.7 210.3 151.7 116.4 0 210.8-67.9 210.8-151.7 0-8.4-.9-17.2-3.1-25.1 49.9-25.6 31.5-99.7-23.8-99.7zM129.4 308.9c0-22 17.6-39.7 39.7-39.7 21.6 0 39.2 17.6 39.2 39.7 0 21.6-17.6 39.2-39.2 39.2-22 .1-39.7-17.6-39.7-39.2zm214.3 93.5c-36.4 36.4-139.1 36.4-175.5 0-4-3.5-4-9.7 0-13.7 3.5-3.5 9.7-3.5 13.2 0 27.8 28.5 120 29 149 0 3.5-3.5 9.7-3.5 13.2 0 4.1 4 4.1 10.2.1 13.7zm-.8-54.2c-21.6 0-39.2-17.6-39.2-39.2 0-22 17.6-39.7 39.2-39.7 22 0 39.7 17.6 39.7 39.7-.1 21.5-17.7 39.2-39.7 39.2z\"\n              />\n            </svg>\n          </div>\n          <div className=\"url\">\n            <NavLink\n              style={{ textDecoration: 'none', color: '#ffffff' }}\n              to=\"/reddit-viewer/\"\n            >\n              /r/{subreddit}{' '}\n            </NavLink>\n          </div>\n        </div>\n        <div className=\"nav-right\">\n          <div className=\"favorites\">\n            <NavLink\n              style={{ textDecoration: 'none', color: '#8AD5FF' }}\n              activeStyle={{\n                color: '#246FB1'\n              }}\n              to=\"/reddit-viewer/favorites/\"\n            >\n              <FontAwesomeIcon icon=\"heart\" style={{ margin: '0 10px' }} />\n              Favorites({favoritesCount})\n            </NavLink>\n          </div>\n        </div>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport './Post.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nclass Post extends Component {\n  state = {\n    addClass: false,\n    likeIcon: 'heart'\n  };\n\n  onFav() {\n    this.setState({ addClass: !this.state.addClass });\n    // e.target.classList.add('fav');\n  }\n  componentDidMount() {\n    if (this.props.isFavaorite == true) {\n      this.setState({ likeIcon: 'trash' });\n    }\n  }\n  render() {\n    const {\n      postImg,\n      postTitle,\n      postUser,\n      postTime,\n      postView,\n      post,\n      addFavorite,\n      deleteFavorite,\n      postID,\n      isFavaorite\n    } = this.props;\n\n    let boxClass = ['image-heart'];\n    if (this.props.isFavaorite === true) {\n      boxClass.push('fav');\n    }\n    return (\n      <div className=\"post-container\">\n        <div className=\"post-image-container\">\n          <img className=\"post-image\" src={postImg} alt=\"\" />\n          <FontAwesomeIcon\n            onClick={() => {\n              this.onFav();\n              if (!this.state.addClass && this.props.isFavaorite === false)\n                addFavorite(post, postID);\n              if (this.state.addClass || this.props.isFavaorite === true)\n                deleteFavorite(postID);\n            }}\n            className={boxClass.join(' ')}\n            icon={this.props.icon}\n          />\n        </div>\n        <div className=\"post-body\">\n          <h2 className=\"post-title\">{postTitle}</h2>\n        </div>\n        <div className=\"post-footer\">\n          <p className=\"post-stats\">\n            <FontAwesomeIcon\n              style={{ color: '#999', fontSize: '9px', marginRight: '5px' }}\n              icon=\"user\"\n            />\n            /u/{postUser} &bull;\n            <FontAwesomeIcon\n              style={{ color: '#999', fontSize: '9px', margin: '0 5px' }}\n              icon=\"clock\"\n            />\n            {postTime} ago\n            <FontAwesomeIcon\n              style={{ color: '#999', fontSize: '9px', margin: '0 5px' }}\n              icon=\"bolt\"\n            />\n            {postView}\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Post;\n","import React, { Component } from 'react';\nimport './PostContainer.scss';\nimport Post from './Post/Post';\nimport moment from 'moment';\nclass PostContainer extends Component {\n  render() {\n    const { posts, favorites } = this.props;\n\n    return (\n      <div className=\"container\">\n        {posts.map((x, index) => {\n          let postImg = x.data.url;\n          let postTitle = x.data.title;\n          let postUser = x.data.author;\n          let postTime = moment().from(moment.utc(x.data.created * 1000), true);\n          let postView = x.data.ups;\n          let postID = x.data.id;\n          let isFavorite = false;\n          if (favorites[postID]) {\n            isFavorite = true;\n          }\n\n          return (\n            <Post\n              deleteFavorite={this.props.deleteFavorite}\n              addFavorite={this.props.addFavorite}\n              post={x}\n              key={index}\n              postImg={postImg}\n              postID={postID}\n              postTitle={postTitle}\n              postUser={postUser}\n              postTime={postTime}\n              postView={postView}\n              isFavaorite={isFavorite}\n              icon=\"heart\"\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default PostContainer;\n","import React, { Component } from 'react';\nimport '../FavoriteContainer/FavoriteContainer.scss';\nimport Post from '../PostContainer/Post/Post';\nimport moment from 'moment';\nclass Favorite extends Component {\n  render() {\n    const { posts } = this.props;\n    let postLength = posts.lengths;\n\n    if (postLength === 0) {\n      return <h1>No Posts</h1>;\n    }\n\n    return (\n      <div className=\"container\">\n        {Object.keys(posts).map((x, index) => {\n          let postImg = posts[x].data.url;\n\n          let postTitle = posts[x].data.title;\n          let postUser = posts[x].data.author;\n          let postTime = moment().from(\n            moment.utc(posts[x].data.created * 1000),\n            true\n          );\n          let postView = posts[x].data.ups;\n          let postID = posts[x].data.id;\n\n          return (\n            <Post\n              deleteFavorite={this.props.deleteFavorite}\n              post={x}\n              key={index}\n              postImg={postImg}\n              postID={postID}\n              postTitle={postTitle}\n              postUser={postUser}\n              postTime={postTime}\n              postView={postView}\n              isFavaorite={true}\n              icon=\"trash\"\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Favorite;\n","import React, { Component } from 'react';\nimport './sass/app.scss';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { Switch, Route } from 'react-router-dom';\nimport {\n  faUser,\n  faClock,\n  faBolt,\n  faHeart,\n  faTrash\n} from '@fortawesome/free-solid-svg-icons';\nimport axios from 'axios';\nimport Header from './components/Header/Header';\nimport PostContainer from './components/Body/PostContainer/PostContainer';\nimport FavoriteContainer from './components/Body/FavoriteContainer/FavoriteContainer';\n\nlibrary.add(faUser, faClock, faBolt, faHeart, faTrash);\n\nclass App extends Component {\n  state = {\n    subreddit: 'analog',\n    isLoading: true,\n    favoritesCount: 0,\n    favorites: {}\n  };\n  componentDidMount() {\n    const { subreddit } = this.state;\n    const localStorageRef = localStorage.getItem('favorites');\n    const URL = `https://www.reddit.com/r/${subreddit}/top/.json`;\n\n    axios\n      .get(URL)\n      .then(res => {\n        return res.data;\n      })\n      .then(data => {\n        if (localStorageRef) {\n          this.setState({\n            isLoading: false,\n            posts: data.data.children,\n            favorites: JSON.parse(localStorageRef),\n            favoritesCount: Object.keys(JSON.parse(localStorageRef)).length\n          });\n        } else {\n          this.setState({\n            isLoading: false,\n            posts: data.data.children\n          });\n        }\n      });\n  }\n  componentDidUpdate() {\n    localStorage.setItem('favorites', JSON.stringify(this.state.favorites));\n  }\n  addFavorite = (favorite, postID) => {\n    // 1. Take a copy of the existing state\n    const favorites = { ...this.state.favorites };\n    // 2. Add our new fish to that fishes variable\n    if (favorites[postID]) {\n    } else {\n      favorites[postID] = favorite;\n    }\n\n    let favoritesCount = Object.keys(favorites).length;\n    // 3. Set the new fishes object to state\n    this.setState({ favorites, favoritesCount });\n  };\n\n  deleteFavorite = key => {\n    // 1. take a copy of state\n    const favorites = { ...this.state.favorites };\n    // 2. update the state\n    delete favorites[key];\n    // 3.  update state\n    let favoritesCount = Object.keys(favorites).length;\n    // 3. Set the new fishes object to state\n    this.setState({ favorites, favoritesCount });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n          subreddit={this.state.subreddit}\n          favoritesCount={this.state.favoritesCount}\n        />\n        {this.state.isLoading && <h3>loading...</h3>}\n        {!this.state.isLoading && (\n          <Switch>\n            <Route\n              exact\n              path=\"/reddit-viewer/\"\n              render={props => (\n                <PostContainer\n                  {...props}\n                  deleteFavorite={this.deleteFavorite}\n                  addFavorite={this.addFavorite}\n                  posts={this.state.posts}\n                  favorites={this.state.favorites}\n                />\n              )}\n            />\n            <Route\n              exact\n              path=\"/reddit-viewer/favorites/\"\n              render={props => (\n                <FavoriteContainer\n                  {...props}\n                  deleteFavorite={this.deleteFavorite}\n                  addFavorite={this.addFavorite}\n                  posts={this.state.favorites}\n                />\n              )}\n            />\n            {/* <Route path=\"/store/:storeId\" component={App} /> */}\n            {/* <Route component={NotFound} /> */}\n          </Switch>\n\n          // <PostContainer\n          //   deleteFavorite={this.deleteFavorite}\n          //   addFavorite={this.addFavorite}\n          //   posts={this.state.posts}\n          // />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}